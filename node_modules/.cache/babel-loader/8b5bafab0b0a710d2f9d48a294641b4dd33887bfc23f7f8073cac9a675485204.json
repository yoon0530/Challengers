{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yoon0\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\codeit-main\\\\src\\\\pages\\\\SignupPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { deleteWishlist, getWishlist } from '../api';\nimport Button from '../components/Button';\nimport Container from '../components/Container';\nimport CourseItem from '../components/CourseItem';\nimport Warn from '../components/Warn';\nimport closeButton from '../assets/closeButton.svg';\nimport styles from './WishlistPage.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingUp = () => {\n  _s();\n  //이름, 이메일, 비밀번호, 비밀번호 확인\n  const [name, setName] = useState < string > '';\n  const [email, setEmail] = useState < string > '';\n  const [password, setPassword] = useState < string > '';\n  const [passwordConfirm, setPasswordConfirm] = useState < string > '';\n\n  //오류메시지 상태저장\n  const [nameMessage, setNameMessage] = useState < string > '';\n  const [emailMessage, setEmailMessage] = useState < string > '';\n  const [passwordMessage, setPasswordMessage] = useState < string > '';\n  const [passwordConfirmMessage, setPasswordConfirmMessage] = useState < string > '';\n\n  // 유효성 검사\n  const [isName, setIsName] = useState < boolean > false;\n  const [isEmail, setIsEmail] = useState < boolean > false;\n  const [isPassword, setIsPassword] = useState < boolean > false;\n  const [isPasswordConfirm, setIsPasswordConfirm] = useState < boolean > false;\n  const router = useRouter();\n  const onSubmit = useCallback(async e => {\n    e.preventDefault();\n    try {\n      await axios.post(REGISTER_USERS_URL, {\n        username: name,\n        password: password,\n        email: email\n      }).then(res => {\n        console.log('response:', res);\n        if (res.status === 200) {\n          router.push('/sign_up/profile_start');\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }, [email, name, password, router]);\n\n  // 이름\n  const onChangeName = useCallback(e => {\n    setName(e.target.value);\n    if (e.target.value.length < 2 || e.target.value.length > 5) {\n      setNameMessage('2글자 이상 5글자 미만으로 입력해주세요.');\n      setIsName(false);\n    } else {\n      setNameMessage('올바른 이름 형식입니다 :)');\n      setIsName(true);\n    }\n  }, []);\n\n  // 이메일\n  const onChangeEmail = useCallback(e => {\n    const emailRegex = /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n    const emailCurrent = e.target.value;\n    setEmail(emailCurrent);\n    if (!emailRegex.test(emailCurrent)) {\n      setEmailMessage('이메일 형식이 틀렸어요! 다시 확인해주세요 ㅜ ㅜ');\n      setIsEmail(false);\n    } else {\n      setEmailMessage('올바른 이메일 형식이에요 : )');\n      setIsEmail(true);\n    }\n  }, []);\n\n  // 비밀번호\n  const onChangePassword = useCallback(e => {\n    const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/;\n    const passwordCurrent = e.target.value;\n    setPassword(passwordCurrent);\n    if (!passwordRegex.test(passwordCurrent)) {\n      setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요!');\n      setIsPassword(false);\n    } else {\n      setPasswordMessage('안전한 비밀번호에요 : )');\n      setIsPassword(true);\n    }\n  }, []);\n\n  // 비밀번호 확인\n  const onChangePasswordConfirm = useCallback(e => {\n    const passwordConfirmCurrent = e.target.value;\n    setPasswordConfirm(passwordConfirmCurrent);\n    if (password === passwordConfirmCurrent) {\n      setPasswordConfirmMessage('비밀번호를 똑같이 입력했어요 : )');\n      setIsPasswordConfirm(true);\n    } else {\n      setPasswordConfirmMessage('비밀번호가 틀려요. 다시 확인해주세요 ㅜ ㅜ');\n      setIsPasswordConfirm(false);\n    }\n  }, [password]);\n  function SignupPage() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(SingUp, \"5Z4HXflNhqc6DoehAEX/WFB5Jyo=\", true);\n_c = SingUp;\nexport default SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SingUp\");","map":{"version":3,"names":["useEffect","useState","Link","deleteWishlist","getWishlist","Button","Container","CourseItem","Warn","closeButton","styles","jsxDEV","_jsxDEV","SingUp","_s","name","setName","string","email","setEmail","password","setPassword","passwordConfirm","setPasswordConfirm","nameMessage","setNameMessage","emailMessage","setEmailMessage","passwordMessage","setPasswordMessage","passwordConfirmMessage","setPasswordConfirmMessage","isName","setIsName","boolean","isEmail","setIsEmail","isPassword","setIsPassword","isPasswordConfirm","setIsPasswordConfirm","router","useRouter","onSubmit","useCallback","e","preventDefault","axios","post","REGISTER_USERS_URL","username","then","res","console","log","status","push","err","error","onChangeName","target","value","length","onChangeEmail","emailRegex","emailCurrent","test","onChangePassword","passwordRegex","passwordCurrent","onChangePasswordConfirm","passwordConfirmCurrent","SignupPage","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yoon0/OneDrive/바탕 화면/codeit-main/src/pages/SignupPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { deleteWishlist, getWishlist } from '../api';\r\nimport Button from '../components/Button';\r\nimport Container from '../components/Container';\r\nimport CourseItem from '../components/CourseItem';\r\nimport Warn from '../components/Warn';\r\nimport closeButton from '../assets/closeButton.svg';\r\nimport styles from './WishlistPage.module.css';\r\n\r\nconst SingUp = () => {\r\n    //이름, 이메일, 비밀번호, 비밀번호 확인\r\n    const [name, setName] = useState < string > ('')\r\n    const [email, setEmail] = useState < string > ('')\r\n    const [password, setPassword] = useState < string > ('')\r\n    const [passwordConfirm, setPasswordConfirm] = useState < string > ('')\r\n\r\n    //오류메시지 상태저장\r\n    const [nameMessage, setNameMessage] = useState < string > ('')\r\n    const [emailMessage, setEmailMessage] = useState < string > ('')\r\n    const [passwordMessage, setPasswordMessage] = useState < string > ('')\r\n    const [passwordConfirmMessage, setPasswordConfirmMessage] = useState < string > ('')\r\n\r\n    // 유효성 검사\r\n    const [isName, setIsName] = useState < boolean > (false)\r\n    const [isEmail, setIsEmail] = useState < boolean > (false)\r\n    const [isPassword, setIsPassword] = useState < boolean > (false)\r\n    const [isPasswordConfirm, setIsPasswordConfirm] = useState < boolean > (false)\r\n    const router = useRouter()\r\n\r\n    const onSubmit = useCallback(\r\n        async (e: React.FormEvent<HTMLFormElement>) => {\r\n            e.preventDefault()\r\n            try {\r\n                await axios\r\n                    .post(REGISTER_USERS_URL, {\r\n                        username: name,\r\n                        password: password,\r\n                        email: email,\r\n                    })\r\n                    .then((res) => {\r\n                        console.log('response:', res)\r\n                        if (res.status === 200) {\r\n                            router.push('/sign_up/profile_start')\r\n                        }\r\n                    })\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        },\r\n        [email, name, password, router]\r\n    )\r\n\r\n    // 이름\r\n    const onChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.target.value)\r\n        if (e.target.value.length < 2 || e.target.value.length > 5) {\r\n            setNameMessage('2글자 이상 5글자 미만으로 입력해주세요.')\r\n            setIsName(false)\r\n        } else {\r\n            setNameMessage('올바른 이름 형식입니다 :)')\r\n            setIsName(true)\r\n        }\r\n    }, [])\r\n\r\n    // 이메일\r\n    const onChangeEmail = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const emailRegex =\r\n            /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/\r\n        const emailCurrent = e.target.value\r\n        setEmail(emailCurrent)\r\n\r\n        if (!emailRegex.test(emailCurrent)) {\r\n            setEmailMessage('이메일 형식이 틀렸어요! 다시 확인해주세요 ㅜ ㅜ')\r\n            setIsEmail(false)\r\n        } else {\r\n            setEmailMessage('올바른 이메일 형식이에요 : )')\r\n            setIsEmail(true)\r\n        }\r\n    }, [])\r\n\r\n    // 비밀번호\r\n    const onChangePassword = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        const passwordCurrent = e.target.value\r\n        setPassword(passwordCurrent)\r\n\r\n        if (!passwordRegex.test(passwordCurrent)) {\r\n            setPasswordMessage('숫자+영문자+특수문자 조합으로 8자리 이상 입력해주세요!')\r\n            setIsPassword(false)\r\n        } else {\r\n            setPasswordMessage('안전한 비밀번호에요 : )')\r\n            setIsPassword(true)\r\n        }\r\n    }, [])\r\n\r\n    // 비밀번호 확인\r\n    const onChangePasswordConfirm = useCallback(\r\n        (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            const passwordConfirmCurrent = e.target.value\r\n            setPasswordConfirm(passwordConfirmCurrent)\r\n\r\n            if (password === passwordConfirmCurrent) {\r\n                setPasswordConfirmMessage('비밀번호를 똑같이 입력했어요 : )')\r\n                setIsPasswordConfirm(true)\r\n            } else {\r\n                setPasswordConfirmMessage('비밀번호가 틀려요. 다시 확인해주세요 ㅜ ㅜ')\r\n                setIsPasswordConfirm(false)\r\n            }\r\n        },\r\n        [password]\r\n    )\r\n\r\n    function SignupPage() {\r\n\r\n        return (\r\n            <Container className={styles.container}>\r\n                <h1 className={styles.title}>회원가입</h1>\r\n\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n    export default SignupPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}