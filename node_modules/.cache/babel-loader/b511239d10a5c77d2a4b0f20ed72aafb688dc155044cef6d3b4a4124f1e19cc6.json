{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yoon0\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\codeit-main\\\\src\\\\pages\\\\SignupPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { deleteWishlist, getWishlist } from '../api';\nimport Button from '../components/Button';\nimport Container from '../components/Container';\nimport CourseItem from '../components/CourseItem';\nimport Warn from '../components/Warn';\nimport closeButton from '../assets/closeButton.svg';\nimport styles from './WishlistPage.module.css';\nimport { SIGNUP_LIST } from './SignupData';\nimport { UserInput } from './UserInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const navigate = useNavigate();\n  const [signupInfo, setSignupInfo] = useState({\n    email: '',\n    password: '',\n    passwordCheck: '',\n    name: '',\n    phone: ''\n  });\n  const [isClick, setIsClick] = useState([]);\n  const handleInfo = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSignupInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const isPasswordCorrect = signupInfo.password === signupInfo.passwordCheck;\n  const loginClick = e => {\n    e.preventDefault();\n    fetch(`${API.signup}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        email: signupInfo.email,\n        password: signupInfo.passwordCheck,\n        name: signupInfo.name,\n        phoneNumber: signupInfo.phone\n      })\n    }).then(response => response.json()).then(result => {\n      if (result.message === 'userCreated') {\n        alert('회원가입 되었습니다!');\n        navigate('/login');\n      } else if (messageList[result.message]) {\n        alert(messageList[result.message]);\n      } else {\n        alert('빈칸을 입력해주세요.');\n      }\n    });\n  };\n  const messageList = {\n    ' Email already exists ': '이미 존재하는 이메일입니다.',\n    'name must be provided! ': '이름이 입력되지 않았습니다.',\n    ' email must be provided! ': '이메일이 입력되지 않았습니다.',\n    ' password must be provided! ': '비밀번호가 입력되지 않았습니다.',\n    ' phoneNumber must be provided!2 ': '핸드폰 번호를 입력해주세요.'\n  };\n  const makeButtonCheck = id => {\n    if (isClick.includes(id)) {\n      setIsClick(isClick.filter(i => i !== id));\n      return;\n    }\n    setIsClick([...isClick, id]);\n  };\n  const isAllChecked = AGREE_LIST.length === isClick.length;\n  const handleAllCheck = () => {\n    isAllChecked ? setIsClick([]) : setIsClick(AGREE_LIST.map(item => item.id));\n  };\n};\n_s(Signup, \"oGh9Nz9FBbSym2VNrlZztRHDRXc=\", true);\n_c = Signup;\nfunction SignupPage() {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SignupPage;\nexport default SignupPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"Signup\");\n$RefreshReg$(_c2, \"SignupPage\");","map":{"version":3,"names":["useEffect","useState","Link","deleteWishlist","getWishlist","Button","Container","CourseItem","Warn","closeButton","styles","SIGNUP_LIST","UserInput","jsxDEV","_jsxDEV","Signup","_s","navigate","useNavigate","signupInfo","setSignupInfo","email","password","passwordCheck","name","phone","isClick","setIsClick","handleInfo","e","value","target","prev","isPasswordCorrect","loginClick","preventDefault","fetch","API","signup","method","headers","body","JSON","stringify","phoneNumber","then","response","json","result","message","alert","messageList","makeButtonCheck","id","includes","filter","i","isAllChecked","AGREE_LIST","length","handleAllCheck","map","item","_c","SignupPage","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/yoon0/OneDrive/바탕 화면/codeit-main/src/pages/SignupPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { deleteWishlist, getWishlist } from '../api';\r\nimport Button from '../components/Button';\r\nimport Container from '../components/Container';\r\nimport CourseItem from '../components/CourseItem';\r\nimport Warn from '../components/Warn';\r\nimport closeButton from '../assets/closeButton.svg';\r\nimport styles from './WishlistPage.module.css';\r\nimport { SIGNUP_LIST } from './SignupData';\r\nimport {UserInput} from './UserInput';\r\n\r\nconst Signup = () => {\r\n    const navigate = useNavigate();\r\n    const [signupInfo, setSignupInfo] = useState({\r\n      email: '',\r\n      password: '',\r\n      passwordCheck: '',\r\n      name: '',\r\n      phone: '',\r\n    });\r\n    const [isClick, setIsClick] = useState([]);\r\n  \r\n    const handleInfo = e => {\r\n      const { name, value } = e.target;\r\n      setSignupInfo(prev => ({ ...prev, [name]: value }));\r\n    };\r\n  \r\n    const isPasswordCorrect = signupInfo.password === signupInfo.passwordCheck;\r\n    const loginClick = e => {\r\n      e.preventDefault();\r\n      fetch(`${API.signup}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n        body: JSON.stringify({\r\n          email: signupInfo.email,\r\n          password: signupInfo.passwordCheck,\r\n          name: signupInfo.name,\r\n          phoneNumber: signupInfo.phone,\r\n        }),\r\n      })\r\n        .then(response => response.json())\r\n        .then(result => {\r\n          if (result.message === 'userCreated') {\r\n            alert('회원가입 되었습니다!');\r\n            navigate('/login');\r\n          } else if (messageList[result.message]) {\r\n            alert(messageList[result.message]);\r\n          } else {\r\n            alert('빈칸을 입력해주세요.');\r\n          }\r\n        });\r\n    };\r\n  \r\n    const messageList = {\r\n      ' Email already exists ': '이미 존재하는 이메일입니다.',\r\n      'name must be provided! ': '이름이 입력되지 않았습니다.',\r\n      ' email must be provided! ': '이메일이 입력되지 않았습니다.',\r\n      ' password must be provided! ': '비밀번호가 입력되지 않았습니다.',\r\n      ' phoneNumber must be provided!2 ': '핸드폰 번호를 입력해주세요.',\r\n    };\r\n  \r\n    const makeButtonCheck = id => {\r\n      if (isClick.includes(id)) {\r\n        setIsClick(isClick.filter(i => i !== id));\r\n        return;\r\n      }\r\n      setIsClick([...isClick, id]);\r\n    };\r\n  \r\n    const isAllChecked = AGREE_LIST.length === isClick.length;\r\n    const handleAllCheck = () => {\r\n      isAllChecked ? setIsClick([]) : setIsClick(AGREE_LIST.map(item => item.id));\r\n    };\r\n}\r\n\r\nfunction SignupPage() {\r\n\r\n  return (\r\n    <Container className={styles.container}>\r\n      <h1 className={styles.title}>회원가입</h1>\r\n    \r\n      \r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SignupPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}